= Courier

Давным давно, в одной далекой-предалекой галактике, был такой модем USR Courier,
он хорошо держал карриер и был мечтой каждого фидошника. А сейчас чтобы получать
много не нужных писем достаточно зарегистрироваться на еще одной социальной
сети.

Чтобы помочь социальной сети справиться с большим количеством видов подписок и
оповещений, а пользователю настроить способы их доставки мы разработали плагин
Courier. Courier On Rails.

Courier - Система управления пользовательскими оповещениями и подписоками.

== Установка

Gemfile:

   gem 'courier'

Создание миграции и конфигцарции <tt>./config/initializers/courier.rb</tt>

   rails g courier

   rake db:migrate

В <tt>config/initializers/courier.rb</tt> регистрируем используемые сервисы, шаблоны и их значения по умолчанию:

    Courier.init do |d|
      d.services                       :active_mailer, :gritter_notice, :facebook
      d.template :import_complete,     :off,           :on,              :off
      d.template :avatar_loaded,       :on,            :off,             :on
      d.template :weekly_subscription, :on,            :on,              :on
    end

В модели пользователя:

  class User << ActiveRecord::Base
    has_courier
    ...

== Использование

Посылаем пользователю сообщение по шаблону <tt>:import_complete<tt> во все разрешенные сервисы

    user.message :import_complete, {:some=>'arguments in hash'}

Если сервис отправляет сообщение в реальном времени, то он его уже
отправил, а если сообщения собираются для дальнейшей отправки, то
осуществляется эта доставка так:

    Courier.deliver_all!

== Сервисы

На данный момент реализованы сервисы:

* Courier::Service::GritterNotice - отправка сообщений через gritter_notices[http://github.com/dapi/gritter_notices]
* Courier::Service::ActionMailer  - TODO
* Courier::Service::MailChimp     - TODO
* Courier::Service::Facebook      - Использует Koala[https://github.com/arsduo/koala]

== Свой сервис

Все сервисы наследуютсяо от <tt>Courier::Service::Base</tt>. Последнее
имя класс автоматически становится именем этого сервиса через
<tt>demodulize.underscore</tt>. Всего нужно имплементировать 2 метода:

* message(owner, template, args)
* deliver!

=== Сервис отложенной отправки

Достаточно реализовать метод <tt>deliver_all!</tt> или <tt>deliver_message</tt>, так как +message+ удачно складывает все сообщения в базу. Например:

    def deliver_all!
      messages.fresh.each do |message|
        send_message_my_way(message.owner, message.text) and message.set_delivered
      end
    end

или

    def deliver_message(message)
      send_message_my_way(message.owner, message.text)
      # returns true to mark message as delivered
    end

=== Сервис отправки в реальном времени

Достаточно реализоват метод +message+. Например:

    def message(owner, template, args)
      send_message_my_way owner, template.get_text(args)
    end



== Contributing to courier

* Yes, please.

== Copyright

Copyright (c) 2011 Danil Pismenny.

